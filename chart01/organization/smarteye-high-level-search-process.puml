@startuml

skinparam dpi 300
scale 1200*1800

skinparam roundCorner 6
skinparam shadowing false
skinparam interface {
  backgroundColor WhiteSmoke
}
skinparam actor {
  FontName Open Sans Condensed Light
  FontSize 14
}
skinparam arrow {
  FontName Open Sans Condensed Light
  FontSize 15
}
skinparam note {
  FontName Open Sans Condensed Light
  FontSize 13
  BorderColor #bbb
}
skinparam footer {
  FontName Open Sans Condensed Light
  FontSize 14
  FontColor DimGrey
}
skinparam sequence {
  actorBorderThickness 1.2
  participantBorderThickness 1.2
  LifeLineBorderColor #ccc
  ParticipantFontName Avenir Next Condensed
  DividerBorderColor #eee
  DividerBackgroundColor #fff
  DividerFontName Open Sans Condensed Light
  DividerFontSize 15
  DividerFontStyle Light
  TitleFontName Open Sans Condensed Light
  TitleFontStyle Light
  TitleFontSize 17
}

actor "End user\n(with a web browser)" as user #fff
participant "smartEYE Main component" as main
participant "smartEYE LexisNexis Metabase API connector" as lnmetabaseconnector
participant "smartEYE Allocator component" as allocator
participant "smartEYE Processing component" as proc
queue "JMS broker\n(ActiveMQ)" as queue #fff
database "RDBMS (Azure SQL)" as rdbms #fff
participant "LexisNexis Metabase API (Internet)" as lnmetabase



=== Search process ==

user -> main: submits a new search for an individual or organization
main -> user: ID of the search just submitted


group every X minutes run the LexisNexis Metabase request to get new documents
    lnmetabaseconnector-> lnmetabase: perform actual search request on LexisNexis Metabase API\n(with adverse terms and other search options, without individual/company names)
    lnmetabase -> lnmetabaseconnector: list of documents matching the search criteria
    loop for each document returned by the LexisNexis Metabase API
        lnmetabaseconnector -> queue: document downloaded from LN Metabase API
        queue -> allocator: document downloaded from LN Metabase API
        allocator -> allocator: checks if the document contains references to individual/company names stored in smartEYE
        alt the document contains references to individual/company names stored in smartEYE
            allocator -> queue: enqueues the document for duplicate check, burst protection
            queue -> main: check for duplication, burst protection
            alt the document is not a duplicate and no burst protection
                main -> queue: downloaded document
                queue -> proc: downloaded document
                proc -> proc: process document
                proc -> queue: processed document
                queue -> main: processed document
                main -> rdbms: save processed document
            end
        end
    end
end



main -> main: search post-processing
user -> main: request search status/results
main -> user: results\n(status, documents, snippets, facts, etc.)


@enduml
